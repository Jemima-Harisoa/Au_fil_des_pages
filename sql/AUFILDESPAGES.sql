-- Connexion et création de la DB
\c postgres
DROP DATABASE IF EXISTS aufildespages;
CREATE DATABASE aufildespages;
\c aufildespages;

-- Tables de base (sans dépendances)
CREATE TABLE departements (
  id_departement INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE diplomes (
  id_diplome INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR,
  niveau VARCHAR
);

CREATE TABLE etat (
  id_etat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE appreciation (
  id_appreciation INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type_appreciation TEXT,
  code INT
);

CREATE TABLE type_contrats (
  id_contrat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

-- Tables intermédiaires (référencent les précédentes)
CREATE TABLE personnes (
  id_personne INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR,
  prenom VARCHAR,
  date_naissance DATE,
  contact VARCHAR UNIQUE,
  lien_image VARCHAR
);

CREATE TABLE profils (
  id_profil INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  titre VARCHAR,
  competences TEXT,
  skills TEXT,
  loisirs TEXT,
  id_diplome INT REFERENCES diplomes(id_diplome),
  filiere TEXT,
  experience_pro TEXT,
  certifications TEXT,
  langues TEXT,
  id_type_contrat INT,
  est_minimum BOOLEAN DEFAULT FALSE,
  id_departement INT REFERENCES departements(id_departement)
);

CREATE TABLE annonces (
  id_annonce INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_profil INT REFERENCES profils(id_profil),
  titre VARCHAR,
  date_publication DATE,
  date_expiration DATE,
  nombre_poste INT,
  lien TEXT
);

CREATE TABLE utilisateurs (
  id_utilisateur SERIAL PRIMARY KEY,
  nom VARCHAR(255) UNIQUE NOT NULL,
  mdp VARCHAR(255) NOT NULL,
  date_inscription TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  date_sortie TIMESTAMP
);


CREATE TABLE candidats (
  id_candidat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT REFERENCES personnes(id_personne),
  id_annonce INT REFERENCES annonces(id_annonce),
  id_profil INT REFERENCES profils(id_profil),
  id_utilisateur INT REFERENCES utilisateurs(id_utilisateur),
  poste VARCHAR
);

CREATE TABLE cv_candidats (
  id_cv_candidats INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat INT REFERENCES candidats(id_candidat), 
  
  competences TEXT,
  skills TEXT,
  loisirs TEXT,
  id_diplome INT REFERENCES diplomes(id_diplome),
  filiere TEXT,
  experience_pro TEXT,
  certifications TEXT,
  langues TEXT,
  
  date_deposition TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE contrats (
  id_contrat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat INT REFERENCES candidats(id_candidat),
  id_type_contrat INT,
  url_contrat VARCHAR
);

CREATE TABLE employes (
  id_employe INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT REFERENCES personnes(id_personne),
  id_contrat INT REFERENCES contrats(id_contrat),
  id_departement INT REFERENCES departements(id_departement),
  poste VARCHAR,
  date_embauche DATE
);

CREATE TABLE admins (
  id_admin SERIAL PRIMARY KEY,
  id_employe INT REFERENCES employes(id_employe),
  nom VARCHAR(255) UNIQUE NOT NULL,
  mdp VARCHAR(255) NOT NULL,
  date_affiliation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  date_fin_affiliation TIMESTAMP
);

CREATE TABLE essais (
  id_essai INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT REFERENCES personnes(id_personne),
  id_contrat INT REFERENCES contrats(id_contrat),
  id_etat INT REFERENCES etat(id_etat),
  date_debut DATE,
  date_fin DATE
);

CREATE TABLE disponibilite_employe (
  id_dispo INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_employe INT REFERENCES employes(id_employe),
  heure_debut TIME,
  heure_fin TIME
);

CREATE TABLE historique_validation (
  id_historique_validation INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_employe INT REFERENCES employes(id_employe),
  id_candidat INT REFERENCES candidats(id_candidat),
  date_heure_validation TIMESTAMP,
  est_valide BOOLEAN
);

CREATE TABLE notifications (
  id_notification INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT REFERENCES personnes(id_personne),
  message TEXT,
  date_notification TIMESTAMP
);

CREATE TABLE planning_entretien (
  id_entretien INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat INT REFERENCES candidats(id_candidat),
  date_heure_entretien TIMESTAMP,
  score_entretien DECIMAL(5,2),
  etat INT REFERENCES etat(id_etat),
  id_appreciation INT REFERENCES appreciation(id_appreciation)
);

CREATE TABLE tests (
  id_test INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat INT REFERENCES candidats(id_candidat),
  score_test DECIMAL(5,2),
  date_test DATE
);

CREATE TABLE questions (
  id_question INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  question TEXT,
  id_profil INT REFERENCES profils(id_profil),
  note DECIMAL(5,2)
);

CREATE TABLE reponses_question (
  id_reponse INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_question INT REFERENCES questions(id_question),
  reponse TEXT,
  est_correct BOOLEAN
);

CREATE TABLE filiere (
  id_filiere INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE message_automatique (
  id_message_automatique INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  message TEXT
);

CREATE TABLE status_validation_cv(
  id_status_validation_cv INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  statut VARCHAR
);

INSERT INTO status_validation_cv (statut) VALUES('Validé'),('Rejeté');

CREATE TABLE validation_cv (
  id_validation_cv INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_cv_candidat INT REFERENCES cv_candidats(id_cv_candidats),
  id_status_validation_cv INT REFERENCES status_validation_cv(id_status_validation_cv),
  similarite DECIMAL(5,2)
);


CREATE TABLE api(
  id_api INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR,
  cle_api VARCHAR
);
INSERT INTO api (nom, cle_api) 
VALUES ('comparaison', 'key_here');


-- Vue scoring
CREATE VIEW view_scoring AS
SELECT 
    c.id_candidat,
    t.score_test,
    pe.score_entretien,
    ROUND(((COALESCE(t.score_test,0) + COALESCE(pe.score_entretien,0)) / 
           (CASE WHEN (t.score_test IS NOT NULL)::INT + (pe.score_entretien IS NOT NULL)::INT > 0 
                 THEN (t.score_test IS NOT NULL)::INT + (pe.score_entretien IS NOT NULL)::INT 
                 ELSE 1 END)
    )::NUMERIC, 2) AS moyenne
FROM candidats c
LEFT JOIN tests t ON c.id_candidat = t.id_candidat
LEFT JOIN planning_entretien pe ON c.id_candidat = pe.id_candidat;
