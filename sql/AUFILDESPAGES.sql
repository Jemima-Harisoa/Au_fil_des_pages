--- Database  
DROP DATABASE IF EXISTS aufildespages;

CREATE Database aufildespages;

\c aufildespages
--- Liste des tables et view
CREATE TABLE annonces (
  id_annonce INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_profil INT,
  titre VARCHAR,
  date_publication DATE,
  date_expiration DATE,
  nombre_poste INT, 
  lien TEXT
);

CREATE TABLE diplomes (
  id_diplome INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR,
  niveau INT
);

CREATE TABLE filieres (
  id_filiere INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE departements(
  id_departement INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE type_contrats(
  id_type_contrat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE profils (
  id_profil INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  titre VARCHAR,
  competences TEXT,
  skills TEXT,
  loisirs TEXT,
  id_diplome INT,
  id_filiere INT,
  experience_pro TEXT,
  certifications TEXT,
  langues TEXT,
  id_type_contrat INT,
  id_departement INT,
  est_minimum BOOLEAN DEFAULT FALSE
);

CREATE TABLE utilisateurs(
  id_utilisateur SERIAL PRIMARY KEY,
  nom VARCHAR(255) UNIQUE NOT NULL,
  mdp VARCHAR(255) NOT NULL,
  date_inscription TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  date_sortie TIMESTAMP
);


CREATE TABLE admins (
  id_admin SERIAL PRIMARY KEY,
  id_employe INT,
  nom VARCHAR(255) UNIQUE NOT NULL,
  mdp VARCHAR(255) NOT NULL,
  date_affiliation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  date_fin_affiliation TIMESTAMP
);


CREATE TABLE personnes (
  id_personne INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR,
  prenom VARCHAR,
  date_naissance DATE,
  contact VARCHAR UNIQUE,
  lien_image VARCHAR
);


CREATE TABLE questions (
  id_question INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  question TEXT,
  id_profil INT,
  note DECIMAL(5,2)
);

CREATE TABLE reponses_question (
  id_reponse INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_question INT,
  reponse TEXT,
  est_correct BOOLEAN
);

CREATE TABLE candidats (
  id_candidat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT,
  id_annonce INT,
  id_profil INT,
  cv_url VARCHAR,
  poste VARCHAR
);


CREATE TABLE tests (
  id_test INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat INT,
  id_annonce INT,
  score_test DECIMAL(5,2),
  date_test DATE
);

CREATE TABLE etat (
  id_etat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE appreciation (
  id_appreciation INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type_appreciation TEXT,
  code INT
);

CREATE TABLE planning_entretien (
  id_entretien INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat int,
  id_employe int,
  date_heure_entretien timestamp,
  score_entretien decimal(5,2),
  etat int,
  id_appreciation int
);




CREATE TABLE message_automatique (
  id_message_automatique INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  message text
);


CREATE TABLE notifications (
  id_notification INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne int,
  message text,
  date_notification timestamp
);

CREATE TABLE contrats (
  id_contrat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat INT,
  id_type_contrat INT,
  url_contrat VARCHAR
);

CREATE TABLE essais (
  id_essai INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT,
  id_contrat INT,
  id_etat INT,
  date_debut DATE,
  date_fin DATE
);

CREATE TABLE employes (
  id_employe INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT,
  id_contrat INT,
  id_departement INT,
  poste VARCHAR,
  date_embauche DATE
);

--TABLE QUI PERMET DE SAVOIR QUI SONT LES RESPONSABLES DES ENTRETIENS 
CREATE TABLE responsable_entretien(
  id_responsable int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_profil INT,
  id_employe INT,
  ordre_passage INT
);

CREATE TABLE disponibilite_entretien (
  id_dispo INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_responsable INT,
  heure_debut TIME, 
  heure_fin TIME,
  jour INT,
  est_valide BOOLEAN DEFAULT TRUE
);
CREATE TABLE jour_ferie(
  id_jour_ferie   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "date" DATE
);
CREATE TABLE config_entretien(
  id_config_entretien int GENERATED BY DEFAULT AS IDENTITY,
  id_departement int,
  duree_entretien INTERVAL
);
-- Vue scoring
CREATE OR REPLACE VIEW view_scoring AS
SELECT 
    c.id_candidat,
    t.score_test,
    pe.score_entretien,
    ROUND(((COALESCE(t.score_test,0) + COALESCE(pe.score_entretien,0)) / 
           (CASE WHEN (t.score_test IS NOT NULL)::int + (pe.score_entretien IS NOT NULL)::int > 0 
                 THEN (t.score_test IS NOT NULL)::int + (pe.score_entretien IS NOT NULL)::int 
                 ELSE 1 END)
    )::numeric, 2) AS moyenne
FROM candidats c
LEFT JOIN tests t ON c.id_candidat = t.id_candidat
LEFT JOIN planning_entretien pe ON c.id_candidat = pe.id_candidat;

CREATE TABLE historique_validation (
  id_historique_validation INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_employe int,
  id_candidat int,
  date_heure_validation timestamp,
  est_valide boolean
);

-- Contraintes de clé étrangère
ALTER TABLE profils ADD FOREIGN KEY (id_diplome) REFERENCES diplomes (id_diplome);

ALTER TABLE questions ADD FOREIGN KEY (id_profil) REFERENCES profils (id_profil);

ALTER TABLE reponses_question ADD FOREIGN KEY (id_question) REFERENCES questions (id_question);

ALTER TABLE candidats ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);
ALTER TABLE candidats ADD FOREIGN KEY (id_annonce) REFERENCES annonces (id_annonce);

ALTER TABLE tests ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);

ALTER TABLE planning_entretien ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);
ALTER TABLE planning_entretien ADD FOREIGN KEY (etat) REFERENCES etat (id_etat);
ALTER TABLE planning_entretien ADD FOREIGN KEY (id_appreciation) REFERENCES appreciation (id_appreciation);
ALTER TABLE planning_entretien ADD FOREIGN KEY (id_employe) REFERENCES employes(id_employe);

ALTER TABLE notifications ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);

ALTER TABLE contrats ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);

ALTER TABLE essais ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);
ALTER TABLE essais ADD FOREIGN KEY (id_contrat) REFERENCES contrats (id_contrat);
ALTER TABLE essais ADD FOREIGN KEY (id_etat) REFERENCES etat (id_etat);

ALTER TABLE employes ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);
ALTER TABLE employes ADD FOREIGN KEY (id_contrat) REFERENCES contrats (id_contrat);
ALTER TABLE employes ADD FOREIGN KEY (id_departement) REFERENCES departements(id_departement);


ALTER TABLE historique_validation ADD FOREIGN KEY (id_employe) REFERENCES employes (id_employe);
ALTER TABLE historique_validation ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);


ALTER TABLE responsable_entretien ADD FOREIGN KEY (id_employe) REFERENCES employes(id_employe);
ALTER TABLE responsable_entretien ADD FOREIGN KEY (id_profil) REFERENCES profils(id_profil);


ALTER TABLE config_entretien ADD FOREIGN KEY (id_departement) REFERENCES departements(id_departement);
ALTER TABLE disponibilite_entretien ADD FOREIGN KEY (id_responsable) REFERENCES responsable_entretien(id_responsable);
