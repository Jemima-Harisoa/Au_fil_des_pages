--- Database
\c postgres
DROP DATABASE IF EXISTS aufildespages;

CREATE DATABASE aufildespages;

\c aufildespages
--- Liste des tables et view

CREATE TABLE admins (
  id_admin SERIAL PRIMARY KEY,
  id_employe INT,
  nom VARCHAR(255) UNIQUE NOT NULL,
  mdp VARCHAR(255) NOT NULL,
  date_affiliation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  date_fin_affiliation TIMESTAMP
);

CREATE TABLE annonces (
  id_annonce INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_profil INT,
  titre VARCHAR,
  date_publication DATE,
  date_expiration DATE,
  nombre_poste INT,
  lien TEXT
);

-- CREATE TABLE annonces (
--   id_annonce INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   titre VARCHAR,
--   lien TEXT,
--   date_publication DATE,
--   date_expiration DATE,
--   nombre_poste INT
-- );

CREATE TABLE appreciation (
  id_appreciation INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type_appreciation TEXT,
  code INT
);

CREATE TABLE candidats (
  id_candidat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT,
  id_annonce INT,
  id_profil INT,
  poste VARCHAR
);

CREATE TABLE contrats (
  id_contrat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat INT,
  id_type_contrat INT,
  url_contrat VARCHAR
);

CREATE TABLE departements (
  id_departement INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE diplomes (
  id_diplome INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR,
  niveau VARCHAR
);

CREATE TABLE disponibilite_employe (
  id_dispo INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_employe INT,
  heure_debut TIME,
  heure_fin TIME
);

CREATE TABLE employes (
  id_employe INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT,
  id_contrat INT,
  id_departement INT,
  poste VARCHAR,
  date_embauche DATE
);

CREATE TABLE essais (
  id_essai INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT,
  id_contrat INT,
  id_etat INT,
  date_debut DATE,
  date_fin DATE
);

CREATE TABLE etat (
  id_etat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE filiere (
  id_filiere INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE historique_validation (
  id_historique_validation INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_employe INT,
  id_candidat INT,
  date_heure_validation TIMESTAMP,
  est_valide BOOLEAN
);

CREATE TABLE message_automatique (
  id_message_automatique INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  message TEXT
);

CREATE TABLE notifications (
  id_notification INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne INT,
  message TEXT,
  date_notification TIMESTAMP
);

CREATE TABLE personnes (
  id_personne INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR,
  prenom VARCHAR,
  date_naissance DATE,
  contact VARCHAR UNIQUE,
  lien_image VARCHAR
);

-- Sample data
-- 1	"Randria"	"Mickael"	"1998-05-21"	"0341234567"	"img/PHOTO_CV/Capture-d-Aoy-cran-du-2025-09-13-21-03-11_1758134870.png"
-- 2	"Rakoto"	"Sonia"	"2000-11-02"	"0347654321"	"img/PHOTO_CV/Capture-d-Aoy-cran-du-2025-08-20-10-36-45_1758135778.png"

CREATE TABLE planning_entretien (
  id_entretien INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat INT,
  date_heure_entretien TIMESTAMP,
  score_entretien DECIMAL(5,2),
  etat INT,
  id_appreciation INT
);

CREATE TABLE profils (
  id_profil INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  titre VARCHAR,
  competences TEXT,
  skills TEXT,
  loisirs TEXT,
  id_diplome INT,
  filiere TEXT,
  experience_pro TEXT,
  certifications TEXT,
  langues TEXT,
  id_type_contrat INT,
  est_minimum BOOLEAN DEFAULT FALSE
);

CREATE TABLE profils (
  id_profil INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  titre VARCHAR,
  competences TEXT,
  skills TEXT,
  loisirs TEXT,
  id_diplome INT,
  id_departement INT,
  niveau_etudes VARCHAR(100),
  experience_pro TEXT,
  certifications TEXT,
  langues TEXT,
  lien_suggestion_annonce VARCHAR,
  id_type_contract INT,
  est_minimum BOOLEAN DEFAULT FALSE
);

CREATE TABLE questions (
  id_question INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  question TEXT,
  id_profil INT,
  note DECIMAL(5,2)
);

CREATE TABLE reponses_question (
  id_reponse INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_question INT,
  reponse TEXT,
  est_correct BOOLEAN
);

CREATE TABLE tests (
  id_test INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat INT,
  score_test DECIMAL(5,2),
  date_test DATE
);

CREATE TABLE type_contrats (
  id_contrat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR
);

CREATE TABLE utilisateurs (
  id_utilisateur SERIAL PRIMARY KEY,
  nom VARCHAR(255) UNIQUE NOT NULL,
  mdp VARCHAR(255) NOT NULL,
  date_inscription TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  date_sortie TIMESTAMP
);

-- Vue scoring
CREATE VIEW view_scoring AS
SELECT 
    c.id_candidat,
    t.score_test,
    pe.score_entretien,
    ROUND(((COALESCE(t.score_test,0) + COALESCE(pe.score_entretien,0)) / 
           (CASE WHEN (t.score_test IS NOT NULL)::INT + (pe.score_entretien IS NOT NULL)::INT > 0 
                 THEN (t.score_test IS NOT NULL)::INT + (pe.score_entretien IS NOT NULL)::INT 
                 ELSE 1 END)
    )::NUMERIC, 2) AS moyenne
FROM candidats c
LEFT JOIN tests t ON c.id_candidat = t.id_candidat
LEFT JOIN planning_entretien pe ON c.id_candidat = pe.id_candidat;

-- Contraintes de clé étrangère
ALTER TABLE profils ADD FOREIGN KEY (id_departement) REFERENCES departements (id_departement);
ALTER TABLE candidats ADD FOREIGN KEY (id_profil) REFERENCES profils (id_profil);
ALTER TABLE profils ADD FOREIGN KEY (id_diplome) REFERENCES diplomes (id_diplome);

ALTER TABLE questions ADD FOREIGN KEY (id_profil) REFERENCES profils (id_profil);

ALTER TABLE reponses_question ADD FOREIGN KEY (id_question) REFERENCES questions (id_question);

ALTER TABLE candidats ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);
ALTER TABLE candidats ADD FOREIGN KEY (id_annonce) REFERENCES annonces (id_annonce);

ALTER TABLE tests ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);

ALTER TABLE planning_entretien ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);
ALTER TABLE planning_entretien ADD FOREIGN KEY (etat) REFERENCES etat (id_etat);
ALTER TABLE planning_entretien ADD FOREIGN KEY (id_appreciation) REFERENCES appreciation (id_appreciation);

ALTER TABLE notifications ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);

ALTER TABLE contrats ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);

ALTER TABLE essais ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);
ALTER TABLE essais ADD FOREIGN KEY (id_contrat) REFERENCES contrats (id_contrat);
ALTER TABLE essais ADD FOREIGN KEY (id_etat) REFERENCES etat (id_etat);

ALTER TABLE employes ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);
ALTER TABLE employes ADD FOREIGN KEY (id_contrat) REFERENCES contrats (id_contrat);
ALTER TABLE employes ADD FOREIGN KEY (id_departement) REFERENCES departements (id_departement);

ALTER TABLE disponibilite_employe ADD FOREIGN KEY (id_employe) REFERENCES employes (id_employe);

ALTER TABLE historique_validation ADD FOREIGN KEY (id_employe) REFERENCES employes (id_employe);
ALTER TABLE historique_validation ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);