--- Database  
\c postgres
DROP DATABASE IF EXISTS aufildespages;

CREATE Database aufildespages;

\c aufildespages
--- Liste des tables et view

CREATE TABLE annonces (
  id_annonce INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  titre varchar,
  lien text,
  date_publication date,
  date_expiration date,
  nombre_poste int , 
  id_profil int
);

CREATE TABLE diplomes (
  id_diplome INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom varchar,
  niveau varchar
);

CREATE TABLE departements (
  id_departement INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom varchar
);

CREATE TABLE profils (
  id_profil INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  titre varchar,
  id_departement int,
  competences text,
  skills text,
  loisirs text,
  niveau_etudes varchar(100),
  id_diplome int,
  experience_pro text,
  certifications text,
  langues text,
  lien_suggestion_annonce varchar ,
  id_type_contract int
);

CREATE TABLE utilisateurs(
  id_utilisateur SERIAL PRIMARY KEY,
  nom VARCHAR(255) UNIQUE NOT NULL,
  mdp VARCHAR(255) NOT NULL,
  date_inscription TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  date_sortie TIMESTAMP
);

CREATE TABLE admins (
  id_admin SERIAL PRIMARY KEY,
  id_employe INT,
  nom VARCHAR(255) UNIQUE NOT NULL,
  mdp VARCHAR(255) NOT NULL,
  date_affiliation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  date_fin_affiliation TIMESTAMP
);


CREATE TABLE personnes (
  id_personne INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom varchar,
  prenom varchar,
  date_naissance date,
  contact varchar UNIQUE,
  lien_image varchar
);

CREATE TABLE questions (
  id_question INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  question text,
  id_profil int,
  note decimal(5,2)
);

CREATE TABLE reponses_question (
  id_reponse INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_question int,
  reponse text,
  est_correct boolean
);

CREATE TABLE candidats (
  id_candidat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne int,
  id_annonce int,
  id_profil int,
  poste varchar
);

CREATE TABLE tests (
  id_test INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat int,
  id_annonce int,
  score_test decimal(5,2),
  date_test date
);

CREATE TABLE planning_entretien (
  id_entretien INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat int,
  date_heure_entretien timestamp,
  score_entretien decimal(5,2),
  etat int,
  id_appreciation int
);

CREATE TABLE etat (
  id_etat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom varchar
);

CREATE TABLE message_automatique (
  id_message_automatique INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  message text
);

CREATE TABLE appreciation (
  id_appreciation INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type_appreciation text,
  code int
);

CREATE TABLE notifications (
  id_notification INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne int,
  message text,
  date_notification timestamp
);

CREATE TABLE contrats (
  id_contrat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_candidat int,
  id_type_contrat int,
  url_contrat varchar
);

CREATE TABLE type_contrats(
    id_contrat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom VARCHAR
);

CREATE TABLE essais (
  id_essai INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne int,
  id_contrat int,
  id_etat int,
  date_debut date,
  date_fin date
);

CREATE TABLE employes (
  id_employe INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_personne int,
  id_contrat int,
  id_departement int,
  poste varchar,
  date_embauche date
);

CREATE TABLE disponibilite_employe (
  id_dispo INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_employe int,
  heure_debut time,
  heure_fin time
);

-- Vue scoring
CREATE VIEW view_scoring AS
SELECT 
    c.id_candidat,
    t.score_test,
    pe.score_entretien,
    ROUND(((COALESCE(t.score_test,0) + COALESCE(pe.score_entretien,0)) / 
           (CASE WHEN (t.score_test IS NOT NULL)::int + (pe.score_entretien IS NOT NULL)::int > 0 
                 THEN (t.score_test IS NOT NULL)::int + (pe.score_entretien IS NOT NULL)::int 
                 ELSE 1 END)
    )::numeric, 2) AS moyenne
FROM candidats c
LEFT JOIN tests t ON c.id_candidat = t.id_candidat
LEFT JOIN planning_entretien pe ON c.id_candidat = pe.id_candidat;

CREATE TABLE historique_validation (
  id_historique_validation INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_employe int,
  id_candidat int,
  date_heure_validation timestamp,
  est_valide boolean
);

-- Contraintes de clé étrangère
ALTER TABLE profils ADD FOREIGN KEY (id_departement) REFERENCES departements (id_departement);
ALTER TABLE candidats ADD FOREIGN KEY (id_profil) REFERENCES profils (id_profil);
ALTER TABLE profils ADD FOREIGN KEY (id_diplome) REFERENCES diplomes (id_diplome);

ALTER TABLE questions ADD FOREIGN KEY (id_profil) REFERENCES profils (id_profil);

ALTER TABLE reponses_question ADD FOREIGN KEY (id_question) REFERENCES questions (id_question);

ALTER TABLE candidats ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);
ALTER TABLE candidats ADD FOREIGN KEY (id_annonce) REFERENCES annonces (id_annonce);

ALTER TABLE tests ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);

ALTER TABLE planning_entretien ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);
ALTER TABLE planning_entretien ADD FOREIGN KEY (etat) REFERENCES etat (id_etat);
ALTER TABLE planning_entretien ADD FOREIGN KEY (id_appreciation) REFERENCES appreciation (id_appreciation);

ALTER TABLE notifications ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);

ALTER TABLE contrats ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);

ALTER TABLE essais ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);
ALTER TABLE essais ADD FOREIGN KEY (id_contrat) REFERENCES contrats (id_contrat);
ALTER TABLE essais ADD FOREIGN KEY (id_etat) REFERENCES etat (id_etat);

ALTER TABLE employes ADD FOREIGN KEY (id_personne) REFERENCES personnes (id_personne);
ALTER TABLE employes ADD FOREIGN KEY (id_contrat) REFERENCES contrats (id_contrat);
ALTER TABLE employes ADD FOREIGN KEY (id_departement) REFERENCES departements (id_departement);

ALTER TABLE disponibilite_employe ADD FOREIGN KEY (id_employe) REFERENCES employes (id_employe);

ALTER TABLE historique_validation ADD FOREIGN KEY (id_employe) REFERENCES employes (id_employe);
ALTER TABLE historique_validation ADD FOREIGN KEY (id_candidat) REFERENCES candidats (id_candidat);

INSERT INTO departements (nom) VALUES
('Personnel manager'),
('Ressources Humaines');

INSERT INTO profils (titre, id_departement, competences, skills, loisirs, niveau_etudes, id_diplome, experience_pro, certifications, langues, lien_suggestion_annonce, id_type_contract) VALUES
('Développeur Web', 1, 'PHP, JavaScript, SQL', 'React, Node.js', 'Lecture, Jeux vidéo', 'Bac+3', 1, '2 ans en startup', 'Certification PHP Zend', 'Français, Anglais', 'https://jobboard.com/devweb', 1),
('Chargé de Recrutement', 2, 'Sourcing, Entretiens', 'Communication, Négociation', 'Voyages', 'Bac+5', 2, '3 ans en cabinet RH', 'Certification RH CIPD', 'Français, Anglais', 'https://jobboard.com/rh', 2),
('Analyste Financier', 3, 'Analyse, Reporting', 'Excel, PowerBI', 'Échecs', 'Bac+5', 3, '5 ans en banque', 'CFA Level 1', 'Français, Anglais', 'https://jobboard.com/finance', 1),
('Community Manager', 4, 'Stratégie digitale', 'Photoshop, SEO', 'Photographie', 'Bac+3', 4, '2 ans en agence digitale', 'Google Digital Marketing', 'Français, Anglais', 'https://jobboard.com/marketing', 1),
('Agent Logistique', 5, 'Gestion stock, Transport', 'SAP, Excel', 'Football', 'Bac+2', 5, '3 ans en entrepôt', 'Formation Supply Chain', 'Français', 'https://jobboard.com/logistique', 2);

INSERT INTO annonces (titre, lien, date_publication, date_expiration, nombre_poste, id_profil) VALUES
('Developpeur Web', 'https://entreprise.com/annonce/devweb', '2025-09-01', '2025-09-30', 2, 1),
('Analyste Financier', 'https://entreprise.com/annonce/finance', '2025-09-10', '2025-10-10', 3, 3),
('Community Manager Junior', 'https://entreprise.com/annonce/com', '2025-09-03', '2025-09-20', 1, 4),
('Agent Logistique', 'https://entreprise.com/annonce/log', '2025-09-12', '2025-10-01', 4, 5);

INSERT INTO personnes (nom, prenom, date_naissance, contact, lien_image) VALUES
('Lia', 'Mia', '1995-05-12', '0341234560', 'https://img.com/jean.jpg'),
('Rakoto', 'Jean', '1995-05-12', '0341234567', 'https://img.com/jean.jpg'),
('Rasoa', 'Sophie', '1998-09-21', '0349876543', 'https://img.com/sophie.jpg'),
('Andry', 'Michel', '1990-11-03', '0345556667', 'https://img.com/michel.jpg'),
('Hanitra', 'Lina', '2000-01-15', '0342223334', 'https://img.com/lina.jpg');


INSERT INTO questions (question, id_profil, note) VALUES
('Qu est ce que le MVC en developpement web ?', 1, 5.00),
('Comment gerer un conflit entre deux candidats ?', 2, 4.00),
('Quelles sont les etapes d un bilan financier ?', 3, 6.00),
('Comment ameliorer l engagement sur une page Facebook ?', 4, 3.00),
('Comment organiser un inventaire de stock ?', 5, 4.50);


INSERT INTO reponses_question (id_question, reponse, est_correct) VALUES
(1, 'Modele Vue Controleur', TRUE),
(1, 'Methode de chiffrement', FALSE),
(2, 'Ecouter les deux parties et proposer une solution', TRUE),
(2, 'Ignorer le probleme', FALSE),
(3, 'Collecte, Analyse, Rapport', TRUE),
(3, 'Juste ecrire un rapport', FALSE),
(4, 'Publier regulierement du contenu attractif', TRUE),
(4, 'Poster une fois par an', FALSE),
(5, 'Classer et compter les produits', TRUE),
(5, 'Ne rien faire', FALSE);


INSERT INTO candidats (id_personne, id_annonce, id_profil, poste) VALUES
(1, 1, 1, 'Developpeur Web'),
(2, 2, 2, 'Charge de Recrutement'),
(3, 3, 3, 'Analyste Financier'),
(4, 4, 4, 'Community Manager');
(5, 1, 1, 'Community Manager');
